<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" access-denied-page="/krams/auth/denied" >
	
		<security:intercept-url pattern="/krams/auth/login" access="permitAll"/>
		<security:intercept-url pattern="/krams/main/admin" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/krams/main/common" access="hasRole('ROLE_USER')"/>
		
		<!-- Adding the openid-login tag activates Spring Security's support for OpenID  -->
		<security:openid-login
				login-page="/krams/auth/login" 
				authentication-failure-handler-ref="openIDAuthenticationFailureHandler"
				default-target-url="/krams/main/common">
			<security:attribute-exchange>
				<security:openid-attribute name="axContactEmail" type="http://axschema.org/contact/email" required="true"/>
	            <security:openid-attribute name="oiContactEmail" type="http://schema.openid.net/contact/email" required="true"/>
	            <security:openid-attribute name="axNamePersonFullname" type="http://axschema.org/namePerson" required="true"/>
	            <security:openid-attribute name="axNamePersonFriendlyName" type="http://axschema.org/namePerson/friendly" required="true"/>
	            <security:openid-attribute name="axNamePersonFirstName" type="http://axschema.org/namePerson/first" required="true"/>
	            <security:openid-attribute name="axNamePersonLastName" type="http://axschema.org/namePerson/last" required="true"/>
			</security:attribute-exchange>
		</security:openid-login>	
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/krams/auth/login" 
				logout-url="/krams/auth/logout"/>
	
	</security:http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider user-service-ref="userDetailsService">
	        		<security:password-encoder ref="passwordEncoder"/>
	        </security:authentication-provider>
	</security:authentication-manager>
	
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	 <!-- An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	<!--  <security:user-service id="userDetailsService">
	 
	 	
	    <security:user name="https://www.google.com/accounts/o8/id?id=AItOawnnaSB0JBwvUlODsRXR53A_JutkDPdQVZQ" 
	    					password="" authorities="ROLE_USER, ROLE_ADMIN" />
	 </security:user-service>
	  -->
	  
	 <bean id="userDetailsService"  name="userAuthenticationProvider" class="com.openenglish.itstool.security.AuthService">
      
    </bean>
    
    
      <bean id="openIDAuthenticationFailureHandler" class="com.openenglish.itstool.security.OpenIDAuthenticationFailureHandler">
        <constructor-arg index="0" value="/openIdRegistration"/>
        <constructor-arg index="1" ref="normalizedOpenIdAttributesBuilder"/>
    </bean>

    <bean id="normalizedOpenIdAttributesBuilder" class="com.openenglish.itstool.security.NormalizedOpenIdAttributesBuilder">
        <property name="emailAddressAttributeNames">
            <set value-type="java.lang.String">
                <value type="java.lang.String">axContactEmail</value>
                <value type="java.lang.String">oiContactEmail</value>
            </set>
        </property>
        <property name="firstNameAttributeNames">
            <set value-type="java.lang.String">
                <value type="java.lang.String">axNamePersonFirstName</value>
            </set>
        </property>
        <property name="lastNameAttributeNames">
            <set value-type="java.lang.String">
                <value type="java.lang.String">axNamePersonLastName</value>
            </set>
        </property>
        <property name="fullNameAttributeNames">
            <set value-type="java.lang.String">
                <value type="java.lang.String">axNamePersonFullname</value>
                <value type="java.lang.String">axNamePersonFriendlyName</value>
            </set>
        </property>
    </bean>
	
	
	
</beans>


